{"ast":null,"code":"import { swap } from \"../Algorithms/swap\"; // getting the quick sort animation\n\nexport function getQuickSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  quickSort(animations, auxiliaryArray, 0, array.length - 1);\n  return animations;\n}\nexport function partition(animations, array, left, right) {\n  var pivot = array[right],\n      i = left,\n      j = right - 1; //adding the pivot to the animation\n\n  animations.push([right, right]);\n\n  while (i <= j) {\n    while (array[i] < pivot) {\n      i++;\n    }\n\n    while (array[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(array, i, j); // add swap to animation\n\n      animations.push([i, j]);\n      i++;\n      j--;\n    }\n  }\n\n  swap(array, i, right); // add swap to animation\n\n  animations.push([i, right]);\n  return i;\n}\nexport function quickSort(animations, array, left, right) {\n  var index;\n\n  if (left < right) {\n    index = partition(animations, array, left, right); //index returned from partition\n\n    quickSort(animations, array, index + 1, right);\n    quickSort(animations, array, left, index - 1);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Algorithms/quickSort.js"],"names":["swap","getQuickSortAnimation","array","animations","auxiliaryArray","slice","quickSort","length","partition","left","right","pivot","i","j","push","index"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB,C,CAEA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB;AACAC,EAAAA,SAAS,CAACH,UAAD,EAAaC,cAAb,EAA6B,CAA7B,EAAgCF,KAAK,CAACK,MAAN,GAAa,CAA7C,CAAT;AACA,SAAOJ,UAAP;AACD;AAGD,OAAO,SAASK,SAAT,CAAmBL,UAAnB,EAA+BD,KAA/B,EAAsCO,IAAtC,EAA4CC,KAA5C,EAAmD;AACxD,MAAIC,KAAK,GAAKT,KAAK,CAACQ,KAAD,CAAnB;AAAA,MACAE,CAAC,GAASH,IADV;AAAA,MAEAI,CAAC,GAASH,KAAK,GAAC,CAFhB,CADwD,CAIxD;;AACAP,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACJ,KAAD,EAAOA,KAAP,CAAhB;;AACA,SAAOE,CAAC,IAAIC,CAAZ,EAAe;AACb,WAAOX,KAAK,CAACU,CAAD,CAAL,GAAWD,KAAlB,EAAyB;AACvBC,MAAAA,CAAC;AACF;;AACD,WAAOV,KAAK,CAACW,CAAD,CAAL,GAAWF,KAAlB,EAAyB;AACvBE,MAAAA,CAAC;AACF;;AACD,QAAID,CAAC,IAAIC,CAAT,EAAY;AACVb,MAAAA,IAAI,CAACE,KAAD,EAAQU,CAAR,EAAWC,CAAX,CAAJ,CADU,CAEV;;AACAV,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAACF,CAAD,EAAIC,CAAJ,CAAhB;AACAD,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;;AACDb,EAAAA,IAAI,CAACE,KAAD,EAAOU,CAAP,EAASF,KAAT,CAAJ,CArBwD,CAsBxD;;AACAP,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACF,CAAD,EAAIF,KAAJ,CAAhB;AACA,SAAOE,CAAP;AACD;AAED,OAAO,SAASN,SAAT,CAAmBH,UAAnB,EAA+BD,KAA/B,EAAsCO,IAAtC,EAA4CC,KAA5C,EAAmD;AACxD,MAAIK,KAAJ;;AACA,MAAIN,IAAI,GAACC,KAAT,EAAgB;AACdK,IAAAA,KAAK,GAAGP,SAAS,CAACL,UAAD,EAAaD,KAAb,EAAoBO,IAApB,EAA0BC,KAA1B,CAAjB,CADc,CACsC;;AACpDJ,IAAAA,SAAS,CAACH,UAAD,EAAaD,KAAb,EAAoBa,KAAK,GAAC,CAA1B,EAA6BL,KAA7B,CAAT;AACAJ,IAAAA,SAAS,CAACH,UAAD,EAAaD,KAAb,EAAoBO,IAApB,EAA0BM,KAAK,GAAC,CAAhC,CAAT;AACD;;AACD,SAAOb,KAAP;AACD","sourcesContent":["import { swap } from \"../Algorithms/swap\";\n\n// getting the quick sort animation\nexport function getQuickSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  quickSort(animations, auxiliaryArray, 0, array.length-1);\n  return animations;\n}\n\n\nexport function partition(animations, array, left, right) {\n  var pivot   = array[right],\n  i       = left,\n  j       = right-1;\n  //adding the pivot to the animation\n  animations.push([right,right]);\n  while (i <= j) {\n    while (array[i] < pivot) {\n      i++;\n    }\n    while (array[j] > pivot) {\n      j--;\n    }\n    if (i <= j) {\n      swap(array, i, j);\n      // add swap to animation\n      animations.push([i, j]);\n      i++;\n      j--;\n    }\n  }\n  swap(array,i,right);\n  // add swap to animation\n  animations.push([i, right]);\n  return i;\n}\n\nexport function quickSort(animations, array, left, right) {\n  var index;\n  if (left<right) {\n    index = partition(animations, array, left, right);  //index returned from partition\n    quickSort(animations, array, index+1, right);\n    quickSort(animations, array, left, index-1);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}