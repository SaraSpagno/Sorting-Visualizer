{"ast":null,"code":"import { swap } from \"../Algorithms/swap\"; // getting the merge sort animation\n\nexport function getMergeSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  mergeSort(auxiliaryArray, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction mergeSort(array, startIdx, endIdx, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(array, startIdx, middleIdx, animations);\n  mergeSort(array, middleIdx + 1, endIdx, animations);\n  merge(animations, array, startIdx, endIdx);\n}\n\nfunction merge(animations, array, left, right) {\n  if (left === right) return;\n\n  for (let i = left; i < right + 1; i++) {\n    let indexOfMin = findMin(array, i, right); // swaping the i with the current min\n\n    swap(array, i, indexOfMin); // pushing animation\n\n    animations.push([indexOfMin, i]);\n  }\n\n  return array;\n} // function to find the min in a current array\n\n\nfunction findMin(array, left, right) {\n  let min = 600;\n  let indexOfMin = 0;\n\n  for (let i = left; i < right + 1; i++) {\n    if (array[i] < min) {\n      min = array[i];\n      indexOfMin = i;\n    }\n  }\n\n  return indexOfMin;\n}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Algorithms/mergeSort.js"],"names":["swap","getMergeSortAnimation","array","animations","auxiliaryArray","slice","mergeSort","length","startIdx","endIdx","middleIdx","Math","floor","merge","left","right","i","indexOfMin","findMin","push","min"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB,C,CAEA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB;AACAC,EAAAA,SAAS,CAACF,cAAD,EAAiB,CAAjB,EAAoBF,KAAK,CAACK,MAAN,GAAe,CAAnC,EAAsCJ,UAAtC,CAAT;AACA,SAAOA,UAAP;AACD;;AAED,SAASG,SAAT,CAAmBJ,KAAnB,EAAyBM,QAAzB,EAAkCC,MAAlC,EAAyCN,UAAzC,EAAqD;AACnD,MAAIK,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAH,EAAAA,SAAS,CAACJ,KAAD,EAAQM,QAAR,EAAkBE,SAAlB,EAA6BP,UAA7B,CAAT;AACAG,EAAAA,SAAS,CAACJ,KAAD,EAAQQ,SAAS,GAAG,CAApB,EAAuBD,MAAvB,EAA+BN,UAA/B,CAAT;AACAU,EAAAA,KAAK,CAACV,UAAD,EAAaD,KAAb,EAAoBM,QAApB,EAA8BC,MAA9B,CAAL;AACD;;AAED,SAASI,KAAT,CAAeV,UAAf,EAA2BD,KAA3B,EAAkCY,IAAlC,EAAwCC,KAAxC,EAA8C;AAC5C,MAAID,IAAI,KAAGC,KAAX,EAAkB;;AAClB,OAAK,IAAIC,CAAC,GAACF,IAAX,EAAiBE,CAAC,GAACD,KAAK,GAAC,CAAzB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/B,QAAIC,UAAU,GAAGC,OAAO,CAAChB,KAAD,EAAQc,CAAR,EAAWD,KAAX,CAAxB,CAD+B,CAE/B;;AACAf,IAAAA,IAAI,CAACE,KAAD,EAAOc,CAAP,EAAUC,UAAV,CAAJ,CAH+B,CAI/B;;AACAd,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAACF,UAAD,EAAYD,CAAZ,CAAhB;AACD;;AACD,SAAOd,KAAP;AACD,C,CAED;;;AACA,SAASgB,OAAT,CAAiBhB,KAAjB,EAAuBY,IAAvB,EAA4BC,KAA5B,EAAmC;AACjC,MAAIK,GAAG,GAAG,GAAV;AACA,MAAIH,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAID,CAAC,GAAGF,IAAb,EAAmBE,CAAC,GAACD,KAAK,GAAC,CAA3B,EAA8BC,CAAC,EAA/B,EAAmC;AACjC,QAAId,KAAK,CAACc,CAAD,CAAL,GAAWI,GAAf,EAAoB;AAClBA,MAAAA,GAAG,GAAGlB,KAAK,CAACc,CAAD,CAAX;AACAC,MAAAA,UAAU,GAAGD,CAAb;AACD;AACF;;AACD,SAAOC,UAAP;AACD","sourcesContent":["import { swap } from \"../Algorithms/swap\";\n\n// getting the merge sort animation\nexport function getMergeSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  mergeSort(auxiliaryArray, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction mergeSort(array,startIdx,endIdx,animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(array, startIdx, middleIdx, animations);\n  mergeSort(array, middleIdx + 1, endIdx, animations);\n  merge(animations, array, startIdx, endIdx);\n}\n\nfunction merge(animations, array, left, right){\n  if (left===right) return;\n  for (let i=left; i<right+1; i++) {\n    let indexOfMin = findMin(array, i, right);\n    // swaping the i with the current min\n    swap(array,i, indexOfMin);\n    // pushing animation\n    animations.push([indexOfMin,i]);\n  }\n  return array;\n}\n\n// function to find the min in a current array\nfunction findMin(array,left,right) {\n  let min = 600;\n  let indexOfMin = 0;\n  for (let i = left; i<right+1; i++) {\n    if (array[i] < min) {\n      min = array[i];\n      indexOfMin = i;\n    }\n  }\n  return indexOfMin;\n}\n"]},"metadata":{},"sourceType":"module"}