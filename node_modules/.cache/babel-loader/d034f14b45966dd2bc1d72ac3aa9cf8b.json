{"ast":null,"code":"import { swap } from \"../Algorithms/swap\"; // getting the animation of insertionSort\n\nexport function getInsertionSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  insertionSort(animations, auxiliaryArray);\n  return animations;\n}\nexport function insertionSort(animations, array) {\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i];\n    let j = i - 1;\n    let index = i;\n\n    while (key < array[j] && j >= 0) {\n      // if we swapped add to the animation\n      swap(array, j, index);\n      animations.push([j, index]);\n      j--;\n      index--;\n    } // if we're not swapping add only the index\n\n\n    if (key > array[j]) {\n      animations.push([i, i]);\n    }\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Algorithms/insertionSort.js"],"names":["swap","getInsertionSortAnimation","array","animations","auxiliaryArray","slice","insertionSort","i","length","key","j","index","push"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB,C,CAEA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AAC/C,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB;AACAC,EAAAA,aAAa,CAACH,UAAD,EAAaC,cAAb,CAAb;AACA,SAAOD,UAAP;AACD;AAGD,OAAO,SAASG,aAAT,CAAuBH,UAAvB,EAAkCD,KAAlC,EAAwC;AAC7C,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACL,KAAK,CAACM,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIE,GAAG,GAAGP,KAAK,CAACK,CAAD,CAAf;AACA,QAAIG,CAAC,GAAGH,CAAC,GAAC,CAAV;AACA,QAAII,KAAK,GAAGJ,CAAZ;;AACA,WAAME,GAAG,GAAGP,KAAK,CAACQ,CAAD,CAAX,IAAkBA,CAAC,IAAE,CAA3B,EAA8B;AAC5B;AACAV,MAAAA,IAAI,CAACE,KAAD,EAAQQ,CAAR,EAAWC,KAAX,CAAJ;AACAR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACF,CAAD,EAAIC,KAAJ,CAAhB;AACAD,MAAAA,CAAC;AACDC,MAAAA,KAAK;AACN,KAVkC,CAWnC;;;AACA,QAAIF,GAAG,GAAGP,KAAK,CAACQ,CAAD,CAAf,EAAoB;AAClBP,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACL,CAAD,EAAIA,CAAJ,CAAhB;AACD;AACF;;AACD,SAAOL,KAAP;AACD","sourcesContent":["import { swap } from \"../Algorithms/swap\";\n\n// getting the animation of insertionSort\nexport function getInsertionSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  insertionSort(animations, auxiliaryArray);\n  return animations;\n}\n\n\nexport function insertionSort(animations,array){\n  for (let i = 1; i<array.length; i++) {\n    let key = array[i];\n    let j = i-1;\n    let index = i;\n    while(key < array[j] && j>=0) {\n      // if we swapped add to the animation\n      swap(array, j, index);\n      animations.push([j, index]);\n      j--;\n      index--;\n    }\n    // if we're not swapping add only the index\n    if (key > array[j]) {\n      animations.push([i, i]);\n    }\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}