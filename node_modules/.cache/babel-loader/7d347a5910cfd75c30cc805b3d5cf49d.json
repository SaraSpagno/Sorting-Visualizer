{"ast":null,"code":"import { swap } from \"../Algorithms/swap\"; // getting the animation of bubble sort\n\nexport function getBubbleSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  bubbleSort(animations, auxiliaryArray);\n  return animations;\n}\nexport function bubbleSort(animations, array) {\n  for (let i = 0; i < array.length; i++) {\n    let len2 = array.length - i;\n\n    for (let j = 0; j < len2; j++) {\n      if (array[j] > array[j + 1]) {\n        swap(array, j, j + 1); // adding the saw to the animation collection\n\n        animations.push([j, j + 1]);\n      } else if (j + 1 === len2 - 1) {\n        animations.push([j + 1, j + 1]);\n      }\n    }\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Algorithms/bubbleSort.js"],"names":["swap","getBubbleSortAnimation","array","animations","auxiliaryArray","slice","bubbleSort","i","length","len2","j","push"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB,C,CAIA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAAvB;AACAC,EAAAA,UAAU,CAACH,UAAD,EAAaC,cAAb,CAAV;AACA,SAAOD,UAAP;AACD;AAED,OAAO,SAASG,UAAT,CAAoBH,UAApB,EAAgCD,KAAhC,EAAuC;AAC5C,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,IAAI,GAAGP,KAAK,CAACM,MAAN,GAAaD,CAAxB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7B,UAAIR,KAAK,CAACQ,CAAD,CAAL,GAAWR,KAAK,CAACQ,CAAC,GAAG,CAAL,CAApB,EAA6B;AAC3BV,QAAAA,IAAI,CAACE,KAAD,EAAQQ,CAAR,EAAWA,CAAC,GAAC,CAAb,CAAJ,CAD2B,CAE3B;;AACAP,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACD,OAJD,MAKK,IAAIA,CAAC,GAAC,CAAF,KAAMD,IAAI,GAAC,CAAf,EAAkB;AACrBN,QAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACD,CAAC,GAAC,CAAH,EAAKA,CAAC,GAAC,CAAP,CAAhB;AACD;AACF;AACF;;AACD,SAAOR,KAAP;AACD","sourcesContent":["import { swap } from \"../Algorithms/swap\";\n\n\n\n// getting the animation of bubble sort\nexport function getBubbleSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  bubbleSort(animations, auxiliaryArray);\n  return animations;\n}\n\nexport function bubbleSort(animations, array) {\n  for (let i = 0; i < array.length; i++) {\n    let len2 = array.length-i;\n    for (let j = 0; j < len2; j++) {\n      if (array[j] > array[j + 1]) {\n        swap(array, j, j+1);\n        // adding the saw to the animation collection\n        animations.push([j, j + 1]);\n      }\n      else if (j+1===len2-1) {\n        animations.push([j+1,j+1]);\n      }\n    }\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}