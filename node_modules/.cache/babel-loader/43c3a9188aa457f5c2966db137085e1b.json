{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saraspagnoletto/sort/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/saraspagnoletto/sort/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/saraspagnoletto/sort/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getQuickSortAnimation}from\"../Algorithms/quickSort\";import{changeColor}from\"../Animations/HelperFunctions\";import{swapBars}from\"../Animations/HelperFunctions\";import{makeAllBarsGreen}from\"../Animations/HelperFunctions\";import{getVelocity}from\"../Animations/HelperFunctions\";var purple=\"#573B8C\";var darkGreen=\"#027524\";export function quickSortAnimation(_x,_x2,_x3,_x4){return _quickSortAnimation.apply(this,arguments);}function _quickSortAnimation(){_quickSortAnimation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(array,arrayBars,speed,buttons){var velocity,animations,pivot,currentChangeLeft,currentChangeRight,_loop,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:velocity=getVelocity(speed,600,205);console.log(velocity);animations=getQuickSortAnimation(array);pivot=0;currentChangeLeft=0;currentChangeRight=0;changeColor(arrayBars,0,arrayBars.length,\"grey\");_loop=function _loop(i){setTimeout(function(){if(currentChangeLeft!==pivot){arrayBars[currentChangeLeft].style.backgroundColor=\"grey\";}arrayBars[currentChangeRight].style.backgroundColor=\"grey\";var _animations$i=_slicedToArray(animations[i],2),oldPosition=_animations$i[0],newPosition=_animations$i[1];var newBarStyle=arrayBars[newPosition].style;// it's the pivot\nif(oldPosition===-1){// the old pivot becomes green\nvar oldPivotStyle=arrayBars[pivot].style;oldPivotStyle.backgroundColor=darkGreen;// the new pivot becomes purple\nnewBarStyle.backgroundColor=purple;pivot=newPosition;}else{var oldBarStyle=arrayBars[oldPosition].style;swapBars(array,arrayBars,oldPosition,newPosition);currentChangeLeft=newPosition;currentChangeRight=oldPosition;if(pivot===newPosition){oldBarStyle.backgroundColor=purple;}}changeColor(arrayBars,pivot+1,arrayBars.length,darkGreen);makeAllBarsGreen(arrayBars,animations,i,buttons);},i*velocity);};for(i=0;i<animations.length;i++){_loop(i);}case 9:case\"end\":return _context.stop();}}},_callee);}));return _quickSortAnimation.apply(this,arguments);}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Animations/QuickSortAnimation.jsx"],"names":["getQuickSortAnimation","changeColor","swapBars","makeAllBarsGreen","getVelocity","purple","darkGreen","quickSortAnimation","array","arrayBars","speed","buttons","velocity","console","log","animations","pivot","currentChangeLeft","currentChangeRight","length","i","setTimeout","style","backgroundColor","oldPosition","newPosition","newBarStyle","oldPivotStyle","oldBarStyle"],"mappings":"mbAAA,OAASA,qBAAT,KAAsC,yBAAtC,CACA,OAASC,WAAT,KAA4B,+BAA5B,CACA,OAASC,QAAT,KAAyB,+BAAzB,CACA,OAASC,gBAAT,KAAiC,+BAAjC,CACA,OAASC,WAAT,KAA4B,+BAA5B,CAEA,GAAMC,CAAAA,MAAM,CAAG,SAAf,CACA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CAGA,eAAsBC,CAAAA,kBAAtB,mE,2GAAO,iBAAkCC,KAAlC,CAAwCC,SAAxC,CAAkDC,KAAlD,CAAwDC,OAAxD,6LACDC,QADC,CACUR,WAAW,CAACM,KAAD,CAAO,GAAP,CAAW,GAAX,CADrB,CAELG,OAAO,CAACC,GAAR,CAAYF,QAAZ,EACMG,UAHD,CAGcf,qBAAqB,CAACQ,KAAD,CAHnC,CAIDQ,KAJC,CAIO,CAJP,CAKDC,iBALC,CAKmB,CALnB,CAMDC,kBANC,CAMoB,CANpB,CAQLjB,WAAW,CAACQ,SAAD,CAAY,CAAZ,CAAeA,SAAS,CAACU,MAAzB,CAAiC,MAAjC,CAAX,CARK,qBASIC,CATJ,EAUHC,UAAU,CAAC,UAAM,CACf,GAAIJ,iBAAiB,GAAGD,KAAxB,CAA+B,CAC7BP,SAAS,CAACQ,iBAAD,CAAT,CAA6BK,KAA7B,CAAmCC,eAAnC,CAAqD,MAArD,CACD,CACDd,SAAS,CAACS,kBAAD,CAAT,CAA8BI,KAA9B,CAAoCC,eAApC,CAAsD,MAAtD,CAJe,iCAKkBR,UAAU,CAACK,CAAD,CAL5B,IAKVI,WALU,kBAKGC,WALH,kBAMf,GAAIC,CAAAA,WAAW,CAAGjB,SAAS,CAACgB,WAAD,CAAT,CAAuBH,KAAzC,CACA;AACA,GAAIE,WAAW,GAAG,CAAC,CAAnB,CAAsB,CACpB;AACA,GAAIG,CAAAA,aAAa,CAAGlB,SAAS,CAACO,KAAD,CAAT,CAAiBM,KAArC,CACAK,aAAa,CAACJ,eAAd,CAAgCjB,SAAhC,CACA;AACAoB,WAAW,CAACH,eAAZ,CAA8BlB,MAA9B,CACAW,KAAK,CAAGS,WAAR,CACD,CAPD,IAQK,CACH,GAAIG,CAAAA,WAAW,CAAGnB,SAAS,CAACe,WAAD,CAAT,CAAuBF,KAAzC,CACApB,QAAQ,CAACM,KAAD,CAAOC,SAAP,CAAkBe,WAAlB,CAA+BC,WAA/B,CAAR,CACAR,iBAAiB,CAAGQ,WAApB,CACAP,kBAAkB,CAAGM,WAArB,CACA,GAAIR,KAAK,GAAGS,WAAZ,CAAyB,CACvBG,WAAW,CAACL,eAAZ,CAA8BlB,MAA9B,CACD,CACF,CACDJ,WAAW,CAACQ,SAAD,CAAYO,KAAK,CAAC,CAAlB,CAAqBP,SAAS,CAACU,MAA/B,CAAuCb,SAAvC,CAAX,CACAH,gBAAgB,CAACM,SAAD,CAAYM,UAAZ,CAAuBK,CAAvB,CAAyBT,OAAzB,CAAhB,CACD,CA3BS,CA2BRS,CAAC,CAAGR,QA3BI,CAAV,CAVG,EASL,IAASQ,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGL,UAAU,CAACI,MAA/B,CAAuCC,CAAC,EAAxC,CAA4C,OAAnCA,CAAmC,EA6B3C,CAtCI,sD","sourcesContent":["import { getQuickSortAnimation } from \"../Algorithms/quickSort\";\nimport { changeColor } from \"../Animations/HelperFunctions\";\nimport { swapBars } from \"../Animations/HelperFunctions\";\nimport { makeAllBarsGreen } from \"../Animations/HelperFunctions\";\nimport { getVelocity } from \"../Animations/HelperFunctions\";\n\nconst purple = \"#573B8C\";\nconst darkGreen = \"#027524\";\n\n\nexport async function quickSortAnimation(array,arrayBars,speed,buttons) {\n  let velocity = getVelocity(speed,600,205);\n  console.log(velocity);\n  const animations = getQuickSortAnimation(array);\n  var pivot = 0;\n  var currentChangeLeft = 0;\n  var currentChangeRight = 0;\n\n  changeColor(arrayBars, 0, arrayBars.length, \"grey\");\n  for (let i = 0; i < animations.length; i++) {\n    setTimeout(() => {\n      if (currentChangeLeft!==pivot) {\n        arrayBars[currentChangeLeft].style.backgroundColor = \"grey\";\n      }\n      arrayBars[currentChangeRight].style.backgroundColor = \"grey\";\n      var [oldPosition, newPosition] = animations[i];\n      var newBarStyle = arrayBars[newPosition].style;\n      // it's the pivot\n      if (oldPosition===-1) {\n        // the old pivot becomes green\n        var oldPivotStyle = arrayBars[pivot].style;\n        oldPivotStyle.backgroundColor = darkGreen;\n        // the new pivot becomes purple\n        newBarStyle.backgroundColor = purple;\n        pivot = newPosition;\n      }\n      else {\n        var oldBarStyle = arrayBars[oldPosition].style;\n        swapBars(array,arrayBars, oldPosition, newPosition);\n        currentChangeLeft = newPosition;\n        currentChangeRight = oldPosition;\n        if (pivot===newPosition) {\n          oldBarStyle.backgroundColor = purple;\n        }\n      }\n      changeColor(arrayBars, pivot+1, arrayBars.length, darkGreen);\n      makeAllBarsGreen(arrayBars, animations,i,buttons);\n    },i * velocity);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}