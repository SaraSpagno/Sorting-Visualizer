{"ast":null,"code":"import{swap}from\"../Algorithms/swap\";// getting the animation of insertionSort\nexport function getInsertionSortAnimation(array){var animations=[];var auxiliaryArray=array.slice();insertionSort(animations,auxiliaryArray);return animations;}export function insertionSort(animations,array){for(var i=1;i<array.length;i++){var key=array[i];var j=i-1;var index=i;while(key<array[j]&&j>=0){// if we swapped add to the animation\nswap(array,j,index);animations.push([j,index]);j--;index--;}// if we're not swapping add only the index\nif(key>array[j]){animations.push([i,i]);}}return array;}","map":{"version":3,"sources":["/Users/saraspagnoletto/sort/src/Main/Algorithms/insertionSort.js"],"names":["swap","getInsertionSortAnimation","array","animations","auxiliaryArray","slice","insertionSort","i","length","key","j","index","push"],"mappings":"AAAA,OAASA,IAAT,KAAqB,oBAArB,CAEA;AACA,MAAO,SAASC,CAAAA,yBAAT,CAAmCC,KAAnC,CAA0C,CAC/C,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,cAAc,CAAGF,KAAK,CAACG,KAAN,EAAvB,CACAC,aAAa,CAACH,UAAD,CAAaC,cAAb,CAAb,CACA,MAAOD,CAAAA,UAAP,CACD,CAGD,MAAO,SAASG,CAAAA,aAAT,CAAuBH,UAAvB,CAAkCD,KAAlC,CAAwC,CAC7C,IAAK,GAAIK,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAACL,KAAK,CAACM,MAAxB,CAAgCD,CAAC,EAAjC,CAAqC,CACnC,GAAIE,CAAAA,GAAG,CAAGP,KAAK,CAACK,CAAD,CAAf,CACA,GAAIG,CAAAA,CAAC,CAAGH,CAAC,CAAC,CAAV,CACA,GAAII,CAAAA,KAAK,CAAGJ,CAAZ,CACA,MAAME,GAAG,CAAGP,KAAK,CAACQ,CAAD,CAAX,EAAkBA,CAAC,EAAE,CAA3B,CAA8B,CAC5B;AACAV,IAAI,CAACE,KAAD,CAAQQ,CAAR,CAAWC,KAAX,CAAJ,CACAR,UAAU,CAACS,IAAX,CAAgB,CAACF,CAAD,CAAIC,KAAJ,CAAhB,EACAD,CAAC,GACDC,KAAK,GACN,CACD;AACA,GAAIF,GAAG,CAAGP,KAAK,CAACQ,CAAD,CAAf,CAAoB,CAClBP,UAAU,CAACS,IAAX,CAAgB,CAACL,CAAD,CAAIA,CAAJ,CAAhB,EACD,CACF,CACD,MAAOL,CAAAA,KAAP,CACD","sourcesContent":["import { swap } from \"../Algorithms/swap\";\n\n// getting the animation of insertionSort\nexport function getInsertionSortAnimation(array) {\n  const animations = [];\n  const auxiliaryArray = array.slice();\n  insertionSort(animations, auxiliaryArray);\n  return animations;\n}\n\n\nexport function insertionSort(animations,array){\n  for (let i = 1; i<array.length; i++) {\n    let key = array[i];\n    let j = i-1;\n    let index = i;\n    while(key < array[j] && j>=0) {\n      // if we swapped add to the animation\n      swap(array, j, index);\n      animations.push([j, index]);\n      j--;\n      index--;\n    }\n    // if we're not swapping add only the index\n    if (key > array[j]) {\n      animations.push([i, i]);\n    }\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}